{"version":3,"sources":["webpack:///dist/bundle.js","webpack:///webpack/bootstrap 6ffae7cb85ea4d9f4d43","webpack:///./src/data/CardTypes.ts","webpack:///./src/DomElement.ts","webpack:///./src/game/Base.ts","webpack:///./src/Game.ts","webpack:///./src/elements/Card.ts","webpack:///./src/elements/Foundation.ts","webpack:///./src/elements/Pile.ts","webpack:///./src/elements/Stock.ts","webpack:///./src/elements/Waste.ts","webpack:///./src/game/Dealer.ts","webpack:///./src/game/Settings.ts","webpack:///./src/app.ts"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","CardSuit","CardValue","CardColor","DomElement","this","className","createNode","textContent","node","document","createElement","getNode","default","Base","game","Dealer_1","Stock_1","Waste_1","Foundation_1","Settings_1","Game","selectedMeta","dragging","stack","start","_this","boardNode","getElementById","board","stock","shuffleCards","createCards","selectCard","forEach","add","tableau","buildTableau","waste","boardHeader","classList","appendChild","setupNode","foundations","f","tableauEl","render","drawFromStock","hasCard","cards","length","drawCount","unshift","draw","recycle","card","selected","console","log","CardTypes_1","Card","suit","selectCallback","isInPile","isInFoundation","color","Heart","Diamond","Red","Black","setAttribute","String","revealed","addEventListener","isSelectable","updateNode","acceptsSibling","__extends","b","__","constructor","create","DomElement_1","Foundation","_super","apply","arguments","canAddCard","Ace","highestValue","Pile","index","King","topCard","Base_1","Stock","pop","undoDraw","push","undoAdd","shift","Waste","visible","clearVisible","map","innerHTML","Card_1","Pile_1","Dealer","Clove","Spade","randomIndex","tempCard","shuffleIndex","Math","floor","random","added","Settings","Game_1","game_1","e","body"],"mappings":"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","file":"./dist/bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 11);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar CardSuit;\n(function (CardSuit) {\n    CardSuit[CardSuit[\"Heart\"] = 0] = \"Heart\";\n    CardSuit[CardSuit[\"Diamond\"] = 1] = \"Diamond\";\n    CardSuit[CardSuit[\"Spade\"] = 2] = \"Spade\";\n    CardSuit[CardSuit[\"Clove\"] = 3] = \"Clove\";\n})(CardSuit = exports.CardSuit || (exports.CardSuit = {}));\nvar CardValue;\n(function (CardValue) {\n    CardValue[CardValue[\"Ace\"] = 1] = \"Ace\";\n    CardValue[CardValue[\"Two\"] = 2] = \"Two\";\n    CardValue[CardValue[\"Three\"] = 3] = \"Three\";\n    CardValue[CardValue[\"Four\"] = 4] = \"Four\";\n    CardValue[CardValue[\"Five\"] = 5] = \"Five\";\n    CardValue[CardValue[\"Six\"] = 6] = \"Six\";\n    CardValue[CardValue[\"Seven\"] = 7] = \"Seven\";\n    CardValue[CardValue[\"Eight\"] = 8] = \"Eight\";\n    CardValue[CardValue[\"Nine\"] = 9] = \"Nine\";\n    CardValue[CardValue[\"Ten\"] = 10] = \"Ten\";\n    CardValue[CardValue[\"Jack\"] = 11] = \"Jack\";\n    CardValue[CardValue[\"Queen\"] = 12] = \"Queen\";\n    CardValue[CardValue[\"King\"] = 13] = \"King\";\n})(CardValue = exports.CardValue || (exports.CardValue = {}));\nvar CardColor;\n(function (CardColor) {\n    CardColor[CardColor[\"Red\"] = 0] = \"Red\";\n    CardColor[CardColor[\"Black\"] = 1] = \"Black\";\n})(CardColor = exports.CardColor || (exports.CardColor = {}));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar DomElement = (function () {\n    function DomElement() {\n        /**\n         *\n         * @type {string}\n         */\n        this.className = '';\n    }\n    /**\n     *\n     * @param {string} textContent\n     */\n    DomElement.prototype.createNode = function (textContent) {\n        if (textContent === void 0) { textContent = ''; }\n        var node = document.createElement('div');\n        node.textContent = textContent;\n        node.className = this.className;\n        this.node = node;\n    };\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    DomElement.prototype.getNode = function () {\n        return this.node;\n    };\n    return DomElement;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = DomElement;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Base = (function () {\n    /**\n     * Instantiate this class with the game instance.\n     *\n     * @param {Game} game\n     */\n    function Base(game) {\n        this.game = game;\n    }\n    return Base;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Base;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Dealer_1 = __webpack_require__(9);\nvar Stock_1 = __webpack_require__(7);\nvar Waste_1 = __webpack_require__(8);\nvar Foundation_1 = __webpack_require__(5);\nvar Settings_1 = __webpack_require__(10);\nvar Game = (function () {\n    function Game() {\n        /**\n         * Metadata about the currently selected card.\n         *\n         * @type {Object}\n         */\n        this.selectedMeta = {\n            dragging: false,\n            stack: []\n        };\n    }\n    /**\n     * Start the elements.\n     */\n    Game.prototype.start = function () {\n        var _this = this;\n        var boardNode = document.getElementById('board');\n        if (!boardNode) {\n            throw \"Invalid id. Cannot find the mount point for the elements board.\";\n        }\n        /**\n         * Set the DOM Node we will render the elements in\n         *\n         * @type {HTMLElement}\n         */\n        this.board = boardNode;\n        /**\n         * Create the stock and all cards.\n         * Shuffle the cards before adding them to the stock.\n         */\n        this.stock = new Stock_1.default(this);\n        Dealer_1.default.shuffleCards(Dealer_1.default.createCards(this.selectCard)).forEach(function (c) { return _this.stock.add(c); });\n        /**\n         * Distribute cards to 7 piles in the tableau\n         */\n        var tableau = Dealer_1.default.buildTableau(this.stock);\n        // Initialize empty waste\n        this.waste = new Waste_1.default(this);\n        var boardHeader = document.createElement('div');\n        boardHeader.classList.add('board__header');\n        // Create DOM node for the stock and waste\n        boardHeader.appendChild(this.stock.setupNode());\n        boardHeader.appendChild(this.waste.setupNode());\n        // Initialize 4 empty foundations\n        var foundations = [\n            new Foundation_1.default(),\n            new Foundation_1.default(),\n            new Foundation_1.default(),\n            new Foundation_1.default()\n        ];\n        foundations.forEach(function (f) {\n            f.createNode();\n            boardHeader.appendChild(f.getNode());\n        });\n        this.board.appendChild(boardHeader);\n        var tableauEl = document.createElement('div');\n        tableauEl.classList.add('tableau');\n        tableau.forEach(function (p) { return tableauEl.appendChild(p.render()); });\n        this.board.appendChild(tableauEl);\n    };\n    Game.prototype.drawFromStock = function () {\n        var _this = this;\n        if (this.stock.hasCard()) {\n            var cards = [];\n            while (cards.length < Settings_1.default.drawCount) {\n                if (!this.stock.hasCard())\n                    break;\n                cards.unshift(this.stock.draw());\n            }\n            this.waste.add(cards);\n        }\n        else {\n            // If there are no cards a click on the stock will recycle the waste.\n            this.waste.recycle().forEach(function (card) { return _this.stock.add(card); });\n        }\n    };\n    Game.prototype.selectCard = function (card) {\n        this.selected = card;\n        console.log(card);\n    };\n    return Game;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Game;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar CardTypes_1 = __webpack_require__(0);\n/**\n * The main Card class. Contains basic data about each card.\n * Can be one of four suits and have one of thirteen values.\n */\nvar Card = (function () {\n    /**\n     * Create a new Card.\n     *\n     * @param value\n     * @param suit\n     * @param selectCallback\n     */\n    function Card(value, suit, selectCallback) {\n        /**\n         * Is this card currently in a pile?\n         * Set \"from outside\" when card is being moved.\n         *\n         * @type {boolean}\n         */\n        this.isInPile = false;\n        /**\n         * Is this card currently in a foundation?\n         * Set \"from outside\" when card is being moved.\n         *\n         * @type {boolean}\n         */\n        this.isInFoundation = false;\n        this.value = value;\n        this.suit = suit;\n        this.selectCallback = selectCallback;\n    }\n    /**\n     * Get the color value of this card.\n     *\n     * @returns {CardColor}\n     */\n    Card.prototype.color = function () {\n        return (this.suit == CardTypes_1.CardSuit.Heart || this.suit == CardTypes_1.CardSuit.Diamond) ? CardTypes_1.CardColor.Red : CardTypes_1.CardColor.Black;\n    };\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    Card.prototype.setupNode = function () {\n        var _this = this;\n        var node = document.createElement('div');\n        node.classList.add('card');\n        node.setAttribute('data-suit', String(this.suit));\n        node.setAttribute('data-value', String(this.value));\n        if (this.revealed) {\n            node.classList.add('card--revealed');\n            node.textContent = CardTypes_1.CardValue[this.value] + \" \" + CardTypes_1.CardSuit[this.suit];\n        }\n        else {\n            node.textContent = 'HIDDEN';\n        }\n        node.addEventListener('click', function () {\n            console.log(CardTypes_1.CardValue[_this.value], CardTypes_1.CardSuit[_this.suit]);\n            if (_this.isSelectable()) {\n                console.log('can select');\n                _this.selectCallback(_this);\n            }\n        });\n        return this.node = node;\n    };\n    Card.prototype.isSelectable = function () {\n        return this.revealed === true;\n    };\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    Card.prototype.updateNode = function () {\n        return this.node;\n    };\n    Card.prototype.acceptsSibling = function (card) {\n        if (this.isInFoundation) {\n            return card.suit === this.suit && card.value === (this.value + 1);\n        }\n        if (this.isInPile) {\n            return card.color() !== this.color() && card.value === (this.value - 1);\n        }\n        return false;\n    };\n    return Card;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Card;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DomElement_1 = __webpack_require__(1);\nvar CardTypes_1 = __webpack_require__(0);\n/**\n * A foundation is one of the four piles of cards you aim to fill during the course of the elements.\n * These each consist of a card suit and must contain the cards of that suit in sequential order.\n */\nvar Foundation = (function (_super) {\n    __extends(Foundation, _super);\n    function Foundation() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         *\n         * @type {string}\n         */\n        _this.className = 'foundation';\n        /**\n         * Array containing all the cards of the foundation\n         *\n         * @type {Array}\n         */\n        _this.cards = [];\n        return _this;\n    }\n    /**\n     * Determine if we can add the card to this foundation. If there are no cards\n     * we will accept any Ace, but otherwise it needs to be the same suit as this\n     * foundation contains and be the next sequential card in the series.\n     *\n     * @param card\n     * @returns {boolean}\n     */\n    Foundation.prototype.canAddCard = function (card) {\n        if (this.cards.length == 0 && card.value == CardTypes_1.CardValue.Ace) {\n            return true;\n        }\n        return this.suit == card.suit && (this.highestValue + 1) == card.value;\n    };\n    return Foundation;\n}(DomElement_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Foundation;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DomElement_1 = __webpack_require__(1);\nvar CardTypes_1 = __webpack_require__(0);\n/**\n * A pile is one of seven as part of the tableau which is where the main cards are.\n * They start off with each card, except the top most, in the pile being hidden.\n * You will add more cards sequentially in descending order here, with the\n * card's color alternating for every other card.\n */\nvar Pile = (function (_super) {\n    __extends(Pile, _super);\n    /**\n     *\n     * @param index\n     */\n    function Pile(index) {\n        var _this = _super.call(this) || this;\n        /**\n         *\n         * @type {Array}\n         */\n        _this.cards = [];\n        /**\n         *\n         * @type {string}\n         */\n        _this.className = 'pile';\n        _this.index = index;\n        return _this;\n    }\n    /**\n     * Determine if this card can be added to this tableau pile. If it is empty we\n     * will accept a king of any suit, otherwise we accept cards of the opposite\n     * color with the value of one less than the top most card.\n     *\n     * @param card\n     * @returns {boolean}\n     */\n    Pile.prototype.canAddCard = function (card) {\n        if (this.cards.length == 0 && card.value == CardTypes_1.CardValue.King) {\n            return true;\n        }\n        return this.topCard.color() !== card.color() && (this.topCard.value - 1) == card.value;\n    };\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    Pile.prototype.render = function () {\n        this.createNode();\n        for (var i = 0; i < this.cards.length; i++) {\n            var node = this.cards[i].setupNode();\n            node.setAttribute('data-pile', String(this.index));\n            node.setAttribute('data-index', String(i));\n            this.node.appendChild(node);\n        }\n        return this.node;\n    };\n    return Pile;\n}(DomElement_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Pile;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Base_1 = __webpack_require__(2);\n/**\n * This is the \"reserve\" of cards. Any cards not\n */\nvar Stock = (function (_super) {\n    __extends(Stock, _super);\n    function Stock() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * All cards in the stock.\n         *\n         * @type {Array}\n         */\n        _this.cards = [];\n        return _this;\n    }\n    /**\n     * determine if the stock has any cards in it.\n     *\n     * @returns {boolean}\n     */\n    Stock.prototype.hasCard = function () {\n        return this.cards.length > 0;\n    };\n    /**\n     * Get a card from the stock.\n     * Used when moving cards from the stock to the waste.\n     *\n     * @returns {Card}\n     */\n    Stock.prototype.draw = function () {\n        var card = this.cards.pop();\n        this.updateNode();\n        return card;\n    };\n    /**\n     * Return a card from the waste to the stock.\n     * Used when undoing the last action that meant pulling a card from the stock.\n     *\n     * @param card\n     */\n    Stock.prototype.undoDraw = function (card) {\n        this.cards.push(card);\n    };\n    /**\n     * Move a card to the stock.\n     * Usually done when recycling the waste.\n     *\n     * @param card\n     */\n    Stock.prototype.add = function (card) {\n        this.cards.unshift(card);\n        this.updateNode();\n    };\n    /**\n     * Get a card back from the stock.\n     * Used when undoing an action that moved a card from the waste to the stock.\n     *\n     * @returns {Card}\n     */\n    Stock.prototype.undoAdd = function () {\n        return this.cards.shift();\n    };\n    Stock.prototype.setupNode = function () {\n        var _this = this;\n        this.node = document.createElement('div');\n        this.node.className = 'stock';\n        this.node.addEventListener('click', function () { return _this.game.drawFromStock(); });\n        return this.updateNode();\n    };\n    Stock.prototype.updateNode = function () {\n        if (this.node) {\n            this.node.textContent = this.cards.length + ' cards';\n        }\n        return this.node;\n    };\n    return Stock;\n}(Base_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Stock;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Base_1 = __webpack_require__(2);\n/**\n * This is where the \"discarded\" cards go after they are plucked from the Stock.\n * However, the top most cards are visible, and the top most card can be\n * dragged to any foundation or pile where it is allowed to be added.\n */\nvar Waste = (function (_super) {\n    __extends(Waste, _super);\n    function Waste() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * All hidden cards in the waste.\n         */\n        _this.cards = [];\n        /**\n         * All visible cards in the waste.\n         */\n        _this.visible = [];\n        return _this;\n    }\n    /**\n     * Move a card to the stock.\n     * Usually done when recycling the waste.\n     *\n     * @param cards {Card[]}\n     */\n    Waste.prototype.add = function (cards) {\n        // Move currently visible cards to the remaining cards\n        this.clearVisible();\n        // Make new cards visible and add to list of visible cards\n        this.visible = cards.map(function (card) {\n            card.revealed = true;\n            return card;\n        });\n        this.updateNode();\n    };\n    /**\n     * Move any currently visible cards to the main cards array,\n     * while marking the cards as not being revealed.\n     */\n    Waste.prototype.clearVisible = function () {\n        while (this.visible.length) {\n            var card = this.visible.pop();\n            card.revealed = false;\n            this.cards.push(card);\n        }\n    };\n    /**\n     * Get a card back from the stock.\n     * Used when undoing an action that moved a card from the waste to the stock.\n     *\n     * @returns {Card}\n     */\n    Waste.prototype.undoAdd = function () {\n        // TODO: Respect drawn cards. No reason to restore 3 visible cards if there were only two left visible.\n        return this.cards.pop();\n    };\n    /**\n     * Get all cards from the waste and.\n     *\n     * @returns {Card[]}\n     */\n    Waste.prototype.recycle = function () {\n        this.clearVisible();\n        var cards = this.cards;\n        this.cards = [];\n        this.updateNode();\n        return cards;\n    };\n    /**\n     * draw the top-most visible card.\n     *\n     * @returns {Card|null}\n     */\n    Waste.prototype.draw = function () {\n        if (this.visible.length) {\n            var card = this.visible.pop();\n            if (this.visible.length === 0) {\n            }\n            return card;\n        }\n        return null;\n    };\n    /**\n     * Initial setup for this elements DOM node.\n     * Must set 'this.node' as well.\n     *\n     * @returns {HTMLElement}\n     */\n    Waste.prototype.setupNode = function () {\n        this.node = document.createElement('div');\n        this.node.className = 'waste';\n        return this.updateNode();\n    };\n    Waste.prototype.updateNode = function () {\n        if (this.node) {\n            this.node.innerHTML = '';\n            var cards = document.createElement('p');\n            cards.textContent = this.cards.length + ' hidden';\n            this.node.appendChild(cards);\n            var visible = document.createElement('p');\n            visible.textContent = this.visible.length + ' visible';\n            this.node.appendChild(visible);\n        }\n        return this.node;\n    };\n    return Waste;\n}(Base_1.default));\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Waste;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Card_1 = __webpack_require__(4);\nvar CardTypes_1 = __webpack_require__(0);\nvar Pile_1 = __webpack_require__(6);\nvar Dealer = (function () {\n    function Dealer() {\n    }\n    /**\n     * Create a standard deck of cards without Jokers.\n     *\n     * @returns {Card[]}\n     */\n    Dealer.createCards = function (selectCallback) {\n        var cards = [];\n        for (var i = CardTypes_1.CardValue.Ace; i <= CardTypes_1.CardValue.King; i++) {\n            cards.push(new Card_1.default(i, CardTypes_1.CardSuit.Clove, selectCallback));\n            cards.push(new Card_1.default(i, CardTypes_1.CardSuit.Diamond, selectCallback));\n            cards.push(new Card_1.default(i, CardTypes_1.CardSuit.Heart, selectCallback));\n            cards.push(new Card_1.default(i, CardTypes_1.CardSuit.Spade, selectCallback));\n        }\n        return cards;\n    };\n    /**\n     * Shuffle a deck of cards\n     *\n     * @param   {Card[]} cards\n     * @returns {Card[]}\n     */\n    Dealer.shuffleCards = function (cards) {\n        var shuffleIndex = cards.length, randomIndex, tempCard;\n        while (shuffleIndex !== 0) {\n            randomIndex = Math.floor(Math.random() * shuffleIndex--);\n            tempCard = cards[randomIndex];\n            cards[randomIndex] = cards[shuffleIndex];\n            cards[shuffleIndex] = tempCard;\n        }\n        return cards;\n    };\n    /**\n     * Build the tableau consisting of 7 piles\n     *\n     * @param   {Stock} stock\n     * @returns {Pile[]}\n     */\n    Dealer.buildTableau = function (stock) {\n        var tableau = [];\n        for (var i = 0; i < 7; i++) {\n            tableau.push(new Pile_1.default(i));\n        }\n        var added = 0;\n        var card;\n        while (added < 28) {\n            for (var i = 1; i <= tableau.length; i++) {\n                var index = i - 1;\n                if (tableau[index].cards.length < index) {\n                    /**\n                     * If there are fewer cards than should be hidden in the pile\n                     * we simply draw a card and add it to the pile.\n                     */\n                    card = stock.draw();\n                    card.isInPile = true;\n                    tableau[index].cards.push(card);\n                    added++;\n                }\n                else if (tableau[index].cards.length == index) {\n                    /**\n                     * If this is the last card we add to this pile we reveal it\n                     * before adding it to the pile.\n                     */\n                    card = stock.draw();\n                    card.isInPile = true;\n                    card.revealed = true;\n                    tableau[index].cards.push(card);\n                    added++;\n                }\n            }\n        }\n        return tableau;\n    };\n    return Dealer;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Dealer;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Settings = (function () {\n    function Settings() {\n    }\n    return Settings;\n}());\n/**\n * Number of cards to draw\n *\n * @type {number}\n */\nSettings.drawCount = 3;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Settings;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar Game_1 = __webpack_require__(3);\n/**\n * We wrap the elements creation in a try - catch block.\n * This way we separate out the error handling from the elements itself.\n *\n * Might change this around later but it is convenient for early development.\n */\ntry {\n    var game_1 = new Game_1.default();\n    document.addEventListener('DOMContentLoaded', function () { return game_1.start(); });\n}\ncatch (e) {\n    document.body.innerHTML = \"<h1>ERROR</h1><p>\" + e + \"</p>\";\n}\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// dist/bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6ffae7cb85ea4d9f4d43","export enum CardSuit {\n    Heart,\n    Diamond,\n    Spade,\n    Clove\n}\n\nexport enum CardValue {\n    Ace = 1,\n    Two = 2,\n    Three = 3,\n    Four = 4,\n    Five = 5,\n    Six = 6,\n    Seven = 7,\n    Eight = 8,\n    Nine = 9,\n    Ten = 10,\n    Jack = 11,\n    Queen = 12,\n    King = 13\n}\n\nexport enum CardColor {\n    Red,\n    Black\n}\n\n\n// WEBPACK FOOTER //\n// ./src/data/CardTypes.ts","export default class DomElement {\n\n    /**\n     *\n     * @type {HTMLElement}\n     */\n    protected node: HTMLElement;\n\n    /**\n     *\n     * @type {string}\n     */\n    protected className: string = '';\n\n    /**\n     *\n     * @param {string} textContent\n     */\n    public createNode(textContent: string = ''): void {\n        let node = document.createElement('div');\n        node.textContent = textContent;\n        node.className = this.className;\n        this.node = node;\n    }\n\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    public getNode(): HTMLElement {\n        return this.node;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/DomElement.ts","import Game from \"../Game\";\n\nexport default class Base {\n\n    /**\n     * The DOM node representing the stock.\n     *\n     * @type {HTMLElement}\n     */\n    public node: HTMLElement;\n\n    /**\n     * Store a reference to the game object.\n     *\n     * @type {Array}\n     */\n    protected game: Game;\n\n    /**\n     * Instantiate this class with the game instance.\n     *\n     * @param {Game} game\n     */\n    public constructor(game: Game) {\n        this.game = game;\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/game/Base.ts","import Dealer from \"./game/Dealer\";\nimport Pile from \"./elements/Pile\";\nimport Stock from \"./elements/Stock\";\nimport Waste from \"./elements/Waste\";\nimport Foundation from \"./elements/Foundation\";\nimport Settings from \"./game/Settings\";\nimport Card from \"./elements/Card\";\n\nexport default class Game {\n\n    /**\n     * The DOM Node for the elements board is the basis of the games representation in the browser.\n     * This is where all cards are rendered and where all elements interaction takes place.\n     */\n    private board: HTMLElement;\n\n    /**\n     * The stock. The source of cards.\n     *\n     * @type {Stock}\n     */\n    private stock: Stock;\n\n    /**\n     * The waste: The drawn cards.\n     *\n     * @type {Waste}\n     */\n    private waste: Waste;\n\n    /**\n     * Any currently selected card, i.e. the card the user is currently dragging.\n     */\n    private selected: Card;\n\n    /**\n     * Metadata about the currently selected card.\n     *\n     * @type {Object}\n     */\n    private selectedMeta: Object = {\n        dragging: false,\n        stack: []\n    };\n\n    /**\n     * Start the elements.\n     */\n    public start() {\n        let boardNode = document.getElementById('board');\n\n        if (!boardNode) {\n            throw \"Invalid id. Cannot find the mount point for the elements board.\";\n        }\n\n        /**\n         * Set the DOM Node we will render the elements in\n         *\n         * @type {HTMLElement}\n         */\n        this.board = boardNode;\n\n        /**\n         * Create the stock and all cards.\n         * Shuffle the cards before adding them to the stock.\n         */\n        this.stock = new Stock(this);\n        Dealer.shuffleCards(Dealer.createCards(this.selectCard)).forEach(c => this.stock.add(c));\n\n        /**\n         * Distribute cards to 7 piles in the tableau\n         */\n        let tableau = Dealer.buildTableau(this.stock);\n\n        // Initialize empty waste\n        this.waste = new Waste(this);\n\n        let boardHeader = document.createElement('div');\n        boardHeader.classList.add('board__header');\n\n        // Create DOM node for the stock and waste\n        boardHeader.appendChild(this.stock.setupNode());\n        boardHeader.appendChild(this.waste.setupNode());\n\n        // Initialize 4 empty foundations\n        let foundations = [\n            new Foundation(),\n            new Foundation(),\n            new Foundation(),\n            new Foundation()\n        ];\n\n        foundations.forEach(f => {\n            f.createNode();\n            boardHeader.appendChild(f.getNode());\n        });\n\n        this.board.appendChild(boardHeader);\n\n        let tableauEl = document.createElement('div');\n        tableauEl.classList.add('tableau');\n        tableau.forEach(p => tableauEl.appendChild(p.render()));\n        this.board.appendChild(tableauEl);\n    }\n\n    public drawFromStock() {\n        if (this.stock.hasCard()) {\n\n            let cards = [];\n            while (cards.length < Settings.drawCount) {\n                if (!this.stock.hasCard()) break;\n                cards.unshift(this.stock.draw());\n            }\n            this.waste.add(cards);\n\n        } else {\n            // If there are no cards a click on the stock will recycle the waste.\n            this.waste.recycle().forEach(card => this.stock.add(card));\n        }\n    }\n\n    private selectCard(card: Card): void {\n        this.selected = card;\n        console.log(card);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/Game.ts","import {CardValue, CardSuit, CardColor} from \"../data/CardTypes\";\nimport {GameElement} from \"../data/Interfaces\";\n\n/**\n * The main Card class. Contains basic data about each card.\n * Can be one of four suits and have one of thirteen values.\n */\nexport default class Card implements GameElement {\n\n    public node: HTMLElement;\n\n    /**\n     * The value of the card. Two-Ten, Jack, Queen, King or Ace.\n     *\n     * @type {CardValue}\n     */\n    public value: CardValue;\n\n    /**\n     * The suit of the card. Heart, Diamond, Spade or Clove.\n     *\n     * @type {CardSuit}\n     */\n    public suit: CardSuit;\n\n    /**\n     * The callback to run when this card is selected.\n     *\n     * @type {Function}\n     */\n    private selectCallback: Function;\n\n    /**\n     * Has this card been revealed\n     *\n     * @type {boolean}\n     */\n    public revealed: boolean;\n\n    /**\n     * Is this card currently in a pile?\n     * Set \"from outside\" when card is being moved.\n     *\n     * @type {boolean}\n     */\n    public isInPile: boolean = false;\n\n    /**\n     * Is this card currently in a foundation?\n     * Set \"from outside\" when card is being moved.\n     *\n     * @type {boolean}\n     */\n    public isInFoundation: boolean = false;\n\n    /**\n     * Create a new Card.\n     *\n     * @param value\n     * @param suit\n     * @param selectCallback\n     */\n    constructor(value: CardValue, suit: CardSuit, selectCallback: Function) {\n        this.value = value;\n        this.suit = suit;\n        this.selectCallback = selectCallback;\n    }\n\n    /**\n     * Get the color value of this card.\n     *\n     * @returns {CardColor}\n     */\n    public color(): CardColor {\n        return (this.suit == CardSuit.Heart || this.suit == CardSuit.Diamond) ? CardColor.Red : CardColor.Black;\n    }\n\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    setupNode(): HTMLElement {\n        let node = document.createElement('div');\n        node.classList.add('card');\n        node.setAttribute('data-suit', String(this.suit));\n        node.setAttribute('data-value', String(this.value));\n\n        if (this.revealed) {\n            node.classList.add('card--revealed');\n            node.textContent = `${CardValue[this.value]} ${CardSuit[this.suit]}`;\n\n        } else {\n            node.textContent = 'HIDDEN';\n        }\n\n        node.addEventListener('click', () => {\n            console.log(CardValue[this.value], CardSuit[this.suit]);\n            if (this.isSelectable()) {\n                console.log('can select');\n                this.selectCallback(this);\n            }\n        });\n\n        return this.node = node;\n    }\n\n    isSelectable(): boolean {\n        return this.revealed === true;\n    }\n\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    updateNode(): HTMLElement {\n        return this.node;\n    }\n\n    acceptsSibling(card: Card): boolean {\n\n        if (this.isInFoundation) {\n            return card.suit === this.suit && card.value === (this.value + 1);\n        }\n\n        if (this.isInPile) {\n            return card.color() !== this.color() && card.value === (this.value - 1);\n        }\n\n        return false;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/elements/Card.ts","import DomElement from \"../DomElement\";\nimport Card from \"./Card\";\nimport {CardValue, CardSuit} from \"../data/CardTypes\";\n\n/**\n * A foundation is one of the four piles of cards you aim to fill during the course of the elements.\n * These each consist of a card suit and must contain the cards of that suit in sequential order.\n */\nexport default class Foundation extends DomElement {\n\n    /**\n     *\n     * @type {string}\n     */\n    protected className: string = 'foundation';\n\n    /**\n     * Array containing all the cards of the foundation\n     *\n     * @type {Array}\n     */\n    public cards: Card[] = [];\n\n    /**\n     * The suit of the cards currently allowed in this foundation\n     *\n     * @type {number|CardSuit}\n     */\n    public suit: CardSuit;\n\n    /**\n     * The value of the latest added card in this foundation\n     *\n     * @type {number|CardValue}\n     */\n    public highestValue: CardValue;\n\n    /**\n     * Determine if we can add the card to this foundation. If there are no cards\n     * we will accept any Ace, but otherwise it needs to be the same suit as this\n     * foundation contains and be the next sequential card in the series.\n     *\n     * @param card\n     * @returns {boolean}\n     */\n    canAddCard(card: Card): boolean {\n\n        if (this.cards.length == 0 && card.value == CardValue.Ace) {\n            return true\n        }\n\n        return this.suit == card.suit && (this.highestValue + 1) == card.value;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/elements/Foundation.ts","import DomElement from \"../DomElement\";\nimport Card from \"./Card\";\nimport {CardValue} from \"../data/CardTypes\";\n\n/**\n * A pile is one of seven as part of the tableau which is where the main cards are.\n * They start off with each card, except the top most, in the pile being hidden.\n * You will add more cards sequentially in descending order here, with the\n * card's color alternating for every other card.\n */\nexport default class Pile extends DomElement {\n\n    /**\n     *\n     * @type {Array}\n     */\n    public cards: Card[] = [];\n\n    /**\n     * The latest added card in this pile.\n     *\n     * @type {Card}\n     */\n    public topCard: Card;\n\n    /**\n     *\n     */\n    public index: Number;\n\n    /**\n     *\n     * @type {string}\n     */\n    protected className: string = 'pile';\n\n    /**\n     *\n     * @param index\n     */\n    constructor(index: Number) {\n        super();\n\n        this.index = index;\n    }\n\n    /**\n     * Determine if this card can be added to this tableau pile. If it is empty we\n     * will accept a king of any suit, otherwise we accept cards of the opposite\n     * color with the value of one less than the top most card.\n     *\n     * @param card\n     * @returns {boolean}\n     */\n    public canAddCard(card: Card): boolean {\n\n        if (this.cards.length == 0 && card.value == CardValue.King) {\n            return true\n        }\n\n        return this.topCard.color() !== card.color() && (this.topCard.value - 1) == card.value;\n    }\n\n    /**\n     *\n     * @returns {HTMLElement}\n     */\n    public render(): HTMLElement {\n\n        this.createNode();\n\n        for (let i = 0; i < this.cards.length; i++) {\n            let node = this.cards[i].setupNode();\n            node.setAttribute('data-pile', String(this.index));\n            node.setAttribute('data-index', String(i));\n            this.node.appendChild(node);\n        }\n\n        return this.node;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/elements/Pile.ts","import Card from \"./Card\";\nimport Base from \"../game/Base\";\nimport {GameElement} from \"../data/Interfaces\";\n\n/**\n * This is the \"reserve\" of cards. Any cards not\n */\nexport default class Stock extends Base implements GameElement {\n\n    /**\n     * All cards in the stock.\n     *\n     * @type {Array}\n     */\n    private cards: Card[] = [];\n\n    /**\n     * determine if the stock has any cards in it.\n     *\n     * @returns {boolean}\n     */\n    public hasCard(): boolean {\n        return this.cards.length > 0;\n    }\n\n    /**\n     * Get a card from the stock.\n     * Used when moving cards from the stock to the waste.\n     *\n     * @returns {Card}\n     */\n    public draw(): Card {\n        let card = this.cards.pop();\n        this.updateNode();\n        return card;\n    }\n\n    /**\n     * Return a card from the waste to the stock.\n     * Used when undoing the last action that meant pulling a card from the stock.\n     *\n     * @param card\n     */\n    public undoDraw(card: Card): void {\n        this.cards.push(card);\n    }\n\n    /**\n     * Move a card to the stock.\n     * Usually done when recycling the waste.\n     *\n     * @param card\n     */\n    public add(card: Card): void {\n        this.cards.unshift(card);\n        this.updateNode();\n    }\n\n    /**\n     * Get a card back from the stock.\n     * Used when undoing an action that moved a card from the waste to the stock.\n     *\n     * @returns {Card}\n     */\n    public undoAdd(): Card {\n        return this.cards.shift();\n    }\n\n    public setupNode(): HTMLElement {\n        this.node = document.createElement('div');\n\n        this.node.className = 'stock';\n        this.node.addEventListener('click', () => this.game.drawFromStock());\n\n        return this.updateNode();\n    }\n\n    public updateNode(): HTMLElement {\n        if (this.node) {\n            this.node.textContent = this.cards.length + ' cards';\n        }\n\n        return this.node;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/elements/Stock.ts","import Card from \"./Card\";\nimport {GameElement} from \"../data/Interfaces\";\nimport Base from \"../game/Base\";\n\n/**\n * This is where the \"discarded\" cards go after they are plucked from the Stock.\n * However, the top most cards are visible, and the top most card can be\n * dragged to any foundation or pile where it is allowed to be added.\n */\nexport default class Waste extends Base implements GameElement {\n\n    /**\n     * All hidden cards in the waste.\n     */\n    private cards: Card[] = [];\n\n    /**\n     * All visible cards in the waste.\n     */\n    private visible: Card[] = [];\n\n    /**\n     * Move a card to the stock.\n     * Usually done when recycling the waste.\n     *\n     * @param cards {Card[]}\n     */\n    public add(cards: Card[]): void {\n\n        // Move currently visible cards to the remaining cards\n        this.clearVisible();\n\n        // Make new cards visible and add to list of visible cards\n        this.visible = cards.map(card => {\n            card.revealed = true;\n            return card;\n        });\n\n        this.updateNode();\n    }\n\n    /**\n     * Move any currently visible cards to the main cards array,\n     * while marking the cards as not being revealed.\n     */\n    protected clearVisible(): void {\n        while (this.visible.length) {\n            let card = this.visible.pop();\n            card.revealed = false;\n            this.cards.push(card);\n        }\n    }\n\n    /**\n     * Get a card back from the stock.\n     * Used when undoing an action that moved a card from the waste to the stock.\n     *\n     * @returns {Card}\n     */\n    public undoAdd(): Card {\n\n        // TODO: Respect drawn cards. No reason to restore 3 visible cards if there were only two left visible.\n\n        return this.cards.pop();\n    }\n\n    /**\n     * Get all cards from the waste and.\n     *\n     * @returns {Card[]}\n     */\n    public recycle(): Card[] {\n        this.clearVisible();\n\n        let cards = this.cards;\n        this.cards = [];\n\n        this.updateNode();\n\n        return cards;\n    }\n\n    /**\n     * draw the top-most visible card.\n     *\n     * @returns {Card|null}\n     */\n    public draw(): Card {\n        if (this.visible.length) {\n            let card = this.visible.pop();\n\n            if (this.visible.length === 0) {\n                //while\n            }\n\n            return card;\n        }\n\n        return null;\n    }\n\n    /**\n     * Initial setup for this elements DOM node.\n     * Must set 'this.node' as well.\n     *\n     * @returns {HTMLElement}\n     */\n    public setupNode(): HTMLElement {\n        this.node = document.createElement('div');\n        this.node.className = 'waste';\n\n        return this.updateNode();\n    }\n\n    updateNode(): HTMLElement {\n        if (this.node) {\n            this.node.innerHTML = '';\n\n            let cards = document.createElement('p');\n            cards.textContent = this.cards.length + ' hidden';\n            this.node.appendChild(cards);\n\n            let visible = document.createElement('p');\n            visible.textContent = this.visible.length + ' visible';\n            this.node.appendChild(visible);\n        }\n\n        return this.node;\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/elements/Waste.ts","import Card from \"../elements/Card\";\nimport {CardValue, CardSuit} from \"../data/CardTypes\";\nimport Pile from \"../elements/Pile\";\nimport Stock from \"../elements/Stock\";\n\nexport default class Dealer {\n\n    /**\n     * Create a standard deck of cards without Jokers.\n     *\n     * @returns {Card[]}\n     */\n    static createCards(selectCallback: Function): Card[] {\n        let cards: Card[] = [];\n        for (let i = CardValue.Ace; i <= CardValue.King; i++) {\n            cards.push(new Card(i, CardSuit.Clove, selectCallback));\n            cards.push(new Card(i, CardSuit.Diamond, selectCallback));\n            cards.push(new Card(i, CardSuit.Heart, selectCallback));\n            cards.push(new Card(i, CardSuit.Spade, selectCallback));\n        }\n\n        return cards;\n    }\n\n    /**\n     * Shuffle a deck of cards\n     *\n     * @param   {Card[]} cards\n     * @returns {Card[]}\n     */\n    static shuffleCards(cards: Card[]): Card[] {\n        let shuffleIndex = cards.length, randomIndex, tempCard;\n        while (shuffleIndex !== 0) {\n            randomIndex = Math.floor(Math.random() * shuffleIndex--);\n            tempCard = cards[randomIndex];\n            cards[randomIndex] = cards[shuffleIndex];\n            cards[shuffleIndex] = tempCard;\n        }\n\n        return cards;\n    }\n\n    /**\n     * Build the tableau consisting of 7 piles\n     *\n     * @param   {Stock} stock\n     * @returns {Pile[]}\n     */\n    static buildTableau(stock: Stock): Pile[] {\n        let tableau: Pile[] = [];\n        for (let i = 0; i < 7; i++) {\n            tableau.push(new Pile(i));\n        }\n\n        let added = 0;\n        let card;\n        while (added < 28) {\n\n            for (let i = 1; i <= tableau.length; i++) {\n                let index = i - 1;\n\n\n                if (tableau[index].cards.length < index) {\n                    /**\n                     * If there are fewer cards than should be hidden in the pile\n                     * we simply draw a card and add it to the pile.\n                     */\n                    card = stock.draw();\n                    card.isInPile = true;\n                    tableau[index].cards.push(card);\n                    added++;\n\n                } else if (tableau[index].cards.length == index) {\n                    /**\n                     * If this is the last card we add to this pile we reveal it\n                     * before adding it to the pile.\n                     */\n                    card = stock.draw();\n                    card.isInPile = true;\n                    card.revealed = true;\n                    tableau[index].cards.push(card);\n                    added++;\n                }\n            }\n        }\n\n        return tableau;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/game/Dealer.ts","export default class Settings {\n\n    /**\n     * Number of cards to draw\n     *\n     * @type {number}\n     */\n    static drawCount: Number = 3;\n\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/game/Settings.ts","import Game from './Game';\n\n/**\n * We wrap the elements creation in a try - catch block.\n * This way we separate out the error handling from the elements itself.\n *\n * Might change this around later but it is convenient for early development.\n */\ntry {\n\n    const game = new Game();\n    document.addEventListener('DOMContentLoaded', () => game.start());\n\n} catch (e) {\n\n    document.body.innerHTML = `<h1>ERROR</h1><p>${e}</p>`;\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app.ts"],"sourceRoot":""}